{"ast":null,"code":"var _jsxFileName = \"/Users/dc/The Beautiful Revolution/Websites/The Beautiful Revolution/Mach 3/TheBeautRev/client/src/components/Contact/Contact.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport API from \"../../utils/API\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport Wrapper from \"../Wrapper\";\nimport backgroundImage from \"../../assets/images/BlueBinary.jpg\";\nimport { Input, TextArea } from \"./Input\";\nconst StyledBackground = styled.section`\n  height: calc(100vh);\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n`;\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  padding-bottom: 180px;\n\n  & > div.content {\n    flex: 1;\n    display: grid;\n    place-items: center;\n  }\n`;\nconst StyledForm = styled.form`\n  max-width: 800px;\n  margin-top: 200px;\n  background-color: #191919;\n  border-radius: 8px;\n  padding: 40px;\n\n  & > button {\n    display: block;\n    font-size: 20px;\n    text-transform: uppercase;\n    width: 250px;\n    color: #fff;\n    border: none;\n    background: #0d0d0d;\n    cursor: pointer;\n    text-align: center;\n    padding: 20px 20px;\n    margin: 20px auto 20px;\n  }\n`;\nconst FormHeader = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & > #icon {\n    height: 75px;\n    display: none;\n\n    @media screen and (min-width: 768px) {\n      display: block;\n    }\n  }\n\n  & > p {\n    margin-left: 20px;\n  }\n  .message-text {\n    font-family: \"opensans-light\", sans-serif;\n    font-size: 18px;\n    line-height: 36px;\n  }\n`;\nconst validationSchema = yup.object().shape({\n  email: yup.string().email().required(\"Please enter a valid email\"),\n  message: yup.string().required(\"Please enter a valid message\"),\n  name: yup.string().required(\"Please provide your name\")\n});\n\nfunction Contact(props) {\n  async function handleSubmit(values, {\n    setSubmitting,\n    setErrors,\n    setStatus,\n    resetForm\n  }) {\n    const {\n      name,\n      email,\n      subject,\n      message\n    } = values;\n\n    try {\n      await API.sendMail({\n        name,\n        email,\n        subject,\n        message\n      });\n      resetForm({});\n      setStatus({\n        success: true\n      });\n    } catch (error) {\n      setStatus({\n        success: false\n      });\n      setSubmitting(false);\n      setErrors({\n        submit: error.message\n      });\n    }\n  } // async function handleSubmit(values, props) {\n  //   const { name, email, subject, message } = values;\n  //   try {\n  //     await API.sendMail({\n  //       name,\n  //       email,\n  //       subject,\n  //       message,\n  //     });\n  //     this.setState({\n  //       alertMessage: \"Message Sent!\",\n  //     });\n  //   } catch (e) {\n  //     this.setState({\n  //       alertVisible: true,\n  //       alertColor: \"red\",\n  //       alertMessage: e.message,\n  //     });\n  //   }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(StyledBackground, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Overlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    onSubmit: handleSubmit,\n    initialValues: {\n      email: \"\",\n      name: \"\",\n      subject: \"\",\n      message: \"\"\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    handleChange\n  }) => {\n    return /*#__PURE__*/React.createElement(StyledForm, {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEnvelope,\n      color: \"grey\",\n      size: \"6x\",\n      id: \"icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, \"If you wish to get in contact to discuss opportunities please do and I will respond as promptly as possible\")), /*#__PURE__*/React.createElement(Input, {\n      name: \"name\",\n      labelText: \"Name\",\n      required: true,\n      onChange: handleChange,\n      value: values.name,\n      error: errors.name && touched.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"email\",\n      labelText: \"Email\",\n      required: true,\n      onChange: handleChange,\n      value: values.email,\n      error: errors.email && touched.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"subject\",\n      labelText: \"Subject\",\n      onChange: handleChange,\n      value: values.subject,\n      error: errors.subject && touched.subject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(TextArea, {\n      name: \"message\",\n      labelText: \"Message\",\n      required: true,\n      onChange: handleChange,\n      value: values.message,\n      error: errors.message && touched.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, \"Send Message\"));\n  }))));\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/dc/The Beautiful Revolution/Websites/The Beautiful Revolution/Mach 3/TheBeautRev/client/src/components/Contact/Contact.js"],"names":["React","styled","Formik","yup","API","FontAwesomeIcon","faEnvelope","Wrapper","backgroundImage","Input","TextArea","StyledBackground","section","Overlay","div","StyledForm","form","FormHeader","validationSchema","object","shape","email","string","required","message","name","Contact","props","handleSubmit","values","setSubmitting","setErrors","setStatus","resetForm","subject","sendMail","success","error","submit","errors","touched","isSubmitting","handleChange"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport API from \"../../utils/API\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport Wrapper from \"../Wrapper\";\nimport backgroundImage from \"../../assets/images/BlueBinary.jpg\";\nimport { Input, TextArea } from \"./Input\";\n\nconst StyledBackground = styled.section`\n  height: calc(100vh);\n  background-image: url(${backgroundImage});\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  padding-bottom: 180px;\n\n  & > div.content {\n    flex: 1;\n    display: grid;\n    place-items: center;\n  }\n`;\n\nconst StyledForm = styled.form`\n  max-width: 800px;\n  margin-top: 200px;\n  background-color: #191919;\n  border-radius: 8px;\n  padding: 40px;\n\n  & > button {\n    display: block;\n    font-size: 20px;\n    text-transform: uppercase;\n    width: 250px;\n    color: #fff;\n    border: none;\n    background: #0d0d0d;\n    cursor: pointer;\n    text-align: center;\n    padding: 20px 20px;\n    margin: 20px auto 20px;\n  }\n`;\n\nconst FormHeader = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & > #icon {\n    height: 75px;\n    display: none;\n\n    @media screen and (min-width: 768px) {\n      display: block;\n    }\n  }\n\n  & > p {\n    margin-left: 20px;\n  }\n  .message-text {\n    font-family: \"opensans-light\", sans-serif;\n    font-size: 18px;\n    line-height: 36px;\n  }\n`;\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().email().required(\"Please enter a valid email\"),\n  message: yup.string().required(\"Please enter a valid message\"),\n  name: yup.string().required(\"Please provide your name\"),\n});\n\nfunction Contact(props) {\n  async function handleSubmit(\n    values,\n    { setSubmitting, setErrors, setStatus, resetForm }\n  ) {\n    const { name, email, subject, message } = values;\n    try {\n      await API.sendMail({\n        name,\n        email,\n        subject,\n        message,\n      });\n      resetForm({});\n      setStatus({ success: true });\n    } catch (error) {\n      setStatus({ success: false });\n      setSubmitting(false);\n      setErrors({ submit: error.message });\n    }\n  }\n\n  // async function handleSubmit(values, props) {\n  //   const { name, email, subject, message } = values;\n\n  //   try {\n  //     await API.sendMail({\n  //       name,\n  //       email,\n  //       subject,\n  //       message,\n  //     });\n  //     this.setState({\n  //       alertMessage: \"Message Sent!\",\n  //     });\n  //   } catch (e) {\n  //     this.setState({\n  //       alertVisible: true,\n  //       alertColor: \"red\",\n  //       alertMessage: e.message,\n  //     });\n  //   }\n  // }\n\n  return (\n    <StyledBackground>\n      <Overlay>\n        <Wrapper>\n          <Formik\n            onSubmit={handleSubmit}\n            initialValues={{ email: \"\", name: \"\", subject: \"\", message: \"\" }}\n            validationSchema={validationSchema}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              isSubmitting,\n              handleSubmit,\n              handleChange,\n            }) => {\n              return (\n                <StyledForm onSubmit={handleSubmit}>\n                  <FormHeader>\n                    <FontAwesomeIcon\n                      icon={faEnvelope}\n                      color=\"grey\"\n                      size=\"6x\"\n                      id=\"icon\"\n                    />\n                    <p className=\"message-text\">\n                      If you wish to get in contact to discuss opportunities\n                      please do and I will respond as promptly as possible\n                    </p>\n                  </FormHeader>\n                  <Input\n                    name={\"name\"}\n                    labelText=\"Name\"\n                    required\n                    onChange={handleChange}\n                    value={values.name}\n                    error={errors.name && touched.name}\n                  />\n                  <Input\n                    name={\"email\"}\n                    labelText=\"Email\"\n                    required\n                    onChange={handleChange}\n                    value={values.email}\n                    error={errors.email && touched.email}\n                  />\n                  <Input\n                    name={\"subject\"}\n                    labelText=\"Subject\"\n                    onChange={handleChange}\n                    value={values.subject}\n                    error={errors.subject && touched.subject}\n                  />\n                  <TextArea\n                    name={\"message\"}\n                    labelText=\"Message\"\n                    required\n                    onChange={handleChange}\n                    value={values.message}\n                    error={errors.message && touched.message}\n                  />\n                  <button type=\"submit\" disabled={isSubmitting}>\n                    Send Message\n                  </button>\n                </StyledForm>\n              );\n            }}\n          </Formik>\n        </Wrapper>\n      </Overlay>\n    </StyledBackground>\n  );\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}